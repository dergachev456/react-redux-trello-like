{"version":3,"sources":["components/Creator/Creator.js","components/Board/Board.js","components/Portal.js","components/Modal/Modal.js","components/Note/Note.js","components/BoardList/BoardList.js","components/TaskListCreator/TaskListCreator.js","components/Task/Task.js","components/SingleTaskList/SingleTaskList.js","components/SliderWrapper/SliderWrapper.js","components/TasksLists/TaskLists.js","components/SingleNote/SingleNote.js","App.js","store/actions/boardActionCreator.js","store/constants.js","store/actions/noteActionCreator.js","store/reducers/boards.js","store/reducers/notes.js","store/reducers/index.js","store/store.js","index.js"],"names":["Creator","state","isOpen","inputRef","React","createRef","handleCreator","setState","prevState","handleSubmit","onSubmit","props","current","focus","handleKeyPress","e","key","creator","this","onChangeInput","inputValue","title","subtitle","mainTitle","className","onClick","value","onKeyPress","ref","onChange","type","Fragment","Component","Board","openEditPanel","onChangeEditedBoardId","id","switchIsEdited","name","removeBoard","to","Portal","el","document","createElement","body","appendChild","removeChild","children","ReactDOM","createPortal","Modal","inputPlaceholder","onClose","editFoo","isEdited","target","placeholder","Note","onChangeEditedNoteId","switchIsEditedNote","removeNote","BoardList","onChangeCreateBoardInput","boards","createBoard","newBoardName","editBoard","isEditedBoard","newNoteName","onChangeCreateNoteInput","createNote","onChangeEditedBoardName","switchIsEditedBoard","editedBoardName","notes","editNote","onChangeEditedNoteName","isEditedNote","editedNoteName","map","board","note","TaskListCreator","createTaskList","onChangeCreateTaskListInput","newTaskListName","Task","openEditTaskPanel","switchIsEditedTask","boardId","tasklistId","onChangeEditedTaskListId","onChangeEditedTaskId","removeTask","completeTask","isCompleted","checked","SingleTaskList","confirmEdit","editTaskList","createTask","removeTaskList","onChangeNewTaskName","newTaskName","tasks","filter","tasklists","tasklist","task","is–°ompleted","settings","dots","infinite","speed","slidesToShow","slidesToScroll","nextArrow","style","display","prevArrow","SliderWrapper","TaskLists","match","params","onChangeEditedTaskListName","editedTaskListName","isEditedTaskList","onChangeEditedTaskName","editTask","editedTaskName","isEditedTask","SingleNote","editedText","onChangeEditedText","text","editNoteText","switchIsEditedNoteText","length","noteId","isEditedNoteText","onDoubleClick","App","editedTaskListId","editedBoardId","editedTaskId","editedNoteId","editedNoteText","Date","getTime","board_id","tasklist_id","getBoardById","exact","path","render","matchProps","connect","BOARDS","load","namespace","newTaskList","forEach","newTask","NOTES","rootReducer","combineReducers","middleware","save","store","createStore","compose","applyMiddleware","getElementById"],"mappings":"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","file":"static/js/main.b2d60e14.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport './Creator.css'\r\nexport default class Creator extends Component {\r\n    state = {\r\n        isOpen: false,\r\n    }\r\n\r\n    inputRef = React.createRef();\r\n\r\n    handleCreator = () => {\r\n        this.setState(prevState => ({\r\n            isOpen: !prevState.isOpen\r\n        }));\r\n\r\n    }\r\n    handleSubmit = () => {\r\n        const { onSubmit } = this.props;\r\n        onSubmit();\r\n        this.inputRef.current.focus();\r\n    }\r\n    handleKeyPress = (e) => {\r\n        if (e.key === 'Enter') {\r\n            this.handleSubmit();\r\n        }\r\n    }\r\n    render() {\r\n        const { isOpen } = this.state;\r\n        const { onChangeInput, inputValue, title, subtitle, mainTitle } = this.props\r\n        let creator;\r\n        if (isOpen) {\r\n            creator = (\r\n                <div className=\"creator creator__opened\">\r\n                    <div className=\"creator__title-container\">\r\n                        <h3 className=\"creator__title\">{title}</h3>\r\n                        <span onClick={this.handleCreator}>&#8855;</span>\r\n                    </div>\r\n                    <h4 className=\"creator__subtitle\">{subtitle}</h4>\r\n                    <input\r\n                        value={inputValue}\r\n                        onKeyPress={this.handleKeyPress}\r\n                        ref={this.inputRef}\r\n                        onChange={onChangeInput}\r\n                        className=\"creator__input\"\r\n                        type=\"text\"\r\n                    />\r\n                    <div className=\"creator__button-container\">\r\n                        <button onClick={this.handleCreator} className=\"creator__close\">cansel</button>\r\n                        <button onClick={this.handleSubmit} className=\"creator__create\">create</button>\r\n                    </div>\r\n                </div>\r\n            );\r\n        } else {\r\n            creator = (\r\n                <div onClick={this.handleCreator} className=\"creator creator__closed\">\r\n                    <h3 className=\"creator__title\">{mainTitle}</h3>\r\n                </div>);\r\n        }\r\n        return (\r\n            <React.Fragment>\r\n                {creator}\r\n            </React.Fragment>\r\n        )\r\n    }\r\n}\r\n","import React from 'react';\r\nimport './Board.css';\r\nimport { Link } from 'react-router-dom';\r\n\r\nclass Board extends React.Component {\r\n    openEditPanel = () => {\r\n        const { onChangeEditedBoardId, id, switchIsEdited } = this.props;\r\n        onChangeEditedBoardId(id);\r\n        switchIsEdited();\r\n    }\r\n    render() {\r\n        const { name, id, removeBoard } = this.props\r\n        return (\r\n            <div className='board'>\r\n                <Link className='board__link' to={`/board/${id}`}>{name}</Link>\r\n                <span\r\n                    className='board__icon'\r\n                    onClick={this.openEditPanel}\r\n                >\r\n                    &#9998;\r\n                </span>\r\n                <span\r\n                    onClick={() => removeBoard(id)}\r\n                    className='board__icon'\r\n                >\r\n                    &#x2715;\r\n                </span>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Board;","import  { Component } from 'react'\r\nimport ReactDOM from 'react-dom'\r\nexport default class Portal extends Component {\r\n    el = document.createElement('div');\r\n\r\n    componentDidMount() {\r\n        document.body.appendChild(this.el);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        document.body.removeChild(this.el);\r\n    }\r\n\r\n    render() {\r\n        const { children } = this.props;\r\n        return (\r\n            ReactDOM.createPortal(children, this.el)\r\n        )\r\n    }\r\n}\r\n","import React from 'react'\r\nimport Portal from '../Portal'\r\nimport './Modal.css'\r\nconst Modal = ({\r\n    inputValue, onChange, inputPlaceholder, onClose, editFoo, isEdited\r\n}) => {\r\n    function onKeyPress(e) {\r\n        if (e.key === 'Enter') {\r\n            onSubmit();\r\n        }\r\n    }\r\n    function onSubmit() {\r\n        editFoo();\r\n        onClose();\r\n    }\r\n\r\n    function handleClick(e) {\r\n        if (e.target.className === 'modal__overlay' ) {\r\n            onClose();\r\n        }\r\n    }\r\n    return (\r\n        <>\r\n            {isEdited &&\r\n                (\r\n                    <Portal>\r\n                        <div className=\"modal__overlay\" onClick={handleClick}>\r\n                            <div className=\"modal\">\r\n                                <input onKeyPress={onKeyPress}\r\n                                    value={inputValue}\r\n                                    onChange={onChange}\r\n                                    placeholder={inputPlaceholder}\r\n                                    className=\"modal__input\" type=\"text\" />\r\n                                <div className=\"modal__button-container\">\r\n                                    <button\r\n                                        onClick={onClose}\r\n                                        className=\"modal__close\">Close</button>\r\n                                    <button\r\n                                        onClick={onSubmit}\r\n                                        className=\"modal__rename\">Rename</button>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </Portal>\r\n                )\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Modal;","import React, { Component } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport './Note.css'\r\n\r\nexport default class Note extends Component {\r\n    openEditPanel = () => {\r\n        const { onChangeEditedNoteId, switchIsEditedNote, id } = this.props;\r\n        onChangeEditedNoteId(id);\r\n        switchIsEditedNote();\r\n    }\r\n    render() {\r\n        const { id, name, removeNote} = this.props;\r\n        return (\r\n            <div className='note'>\r\n                <Link className='note__link' to={`/note/${id}`}>{name}</Link>\r\n                <span\r\n                    className='note__icon'\r\n                    onClick={this.openEditPanel}\r\n                >\r\n                    &#9998;\r\n                    </span>\r\n                <span\r\n                    onClick={() => removeNote(id)}\r\n                    className='note__icon'\r\n                >\r\n                    &#x2715;\r\n                    </span>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\n","import React from 'react';\r\nimport Creator from '../Creator/Creator';\r\nimport './BoardList.css';\r\nimport Board from '../Board/Board';\r\nimport '../Board/Board.css';\r\nimport Modal from '../Modal/Modal';\r\nimport Note from '../Note/Note';\r\n\r\nfunction BoardList(props) {\r\n    const { onChangeCreateBoardInput, boards, createBoard, removeBoard, newBoardName, editBoard, isEditedBoard,\r\n        onChangeEditedBoardId, newNoteName, onChangeCreateNoteInput, createNote, onChangeEditedBoardName,\r\n        switchIsEditedBoard, editedBoardName, notes, removeNote, editNote, onChangeEditedNoteName, onChangeEditedNoteId,\r\n        switchIsEditedNote, isEditedNote, editedNoteName } = props;\r\n    return (\r\n        <div className='board-list'>\r\n            <Creator\r\n                onChangeInput={onChangeCreateBoardInput}\r\n                onSubmit={createBoard}\r\n                inputValue={newBoardName}\r\n                title={'Creating a board'}\r\n                subtitle={'How we can call your board?'}\r\n                mainTitle={'New board'}\r\n            />\r\n            <Creator\r\n                onChangeInput={onChangeCreateNoteInput}\r\n                onSubmit={createNote}\r\n                inputValue={newNoteName}\r\n                title={'Creating a note'}\r\n                subtitle={'How we can call your note?'}\r\n                mainTitle={'New note'}\r\n            />\r\n            {\r\n                boards && boards.map(board => {\r\n                    return (\r\n                        <Board\r\n                            removeBoard={removeBoard}\r\n                            id={board.id} key={board.id}\r\n                            name={board.name}\r\n                            switchIsEdited={switchIsEditedBoard}\r\n                            onChangeEditedBoardId={onChangeEditedBoardId}\r\n                        />\r\n                    )\r\n                })\r\n            }\r\n            {\r\n                notes && notes.map(note => {\r\n                    return (\r\n                        <Note\r\n                            id={note.id} key={note.id}\r\n                            name={note.name}\r\n                            removeNote={removeNote}\r\n                            onChangeEditedNoteId={onChangeEditedNoteId}\r\n                            switchIsEditedNote={switchIsEditedNote}\r\n                        />\r\n                    )\r\n                })\r\n            }\r\n            <Modal\r\n                inputValue={editedBoardName}\r\n                onClose={switchIsEditedBoard}\r\n                onChange={onChangeEditedBoardName}\r\n                inputPlaceholder=\"enter new name\"\r\n                editFoo={editBoard}\r\n                isEdited={isEditedBoard}\r\n            />\r\n            <Modal\r\n                inputValue={editedNoteName}\r\n                onClose={switchIsEditedNote}\r\n                onChange={onChangeEditedNoteName}\r\n                inputPlaceholder=\"enter new name\"\r\n                editFoo={editNote}\r\n                isEdited={isEditedNote}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default BoardList;","import React, { Component } from 'react'\r\nimport './TaskListCreator.css'\r\n\r\nexport default class TaskListCreator extends Component {\r\n    inputRef = React.createRef();\r\n\r\n    handleKeyPress = (e) => {\r\n        const { createTaskList, id } = this.props;\r\n        if (e.key === 'Enter') {\r\n            createTaskList(id);\r\n            this.inputRef.current.focus();\r\n        }\r\n    }\r\n    render() {\r\n        const { onChangeCreateTaskListInput, newTaskListName } = this.props;\r\n        return (\r\n            <div className='tasklist-creator'>\r\n                <input\r\n                    placeholder='add a list'\r\n                    type=\"text\"\r\n                    className=\"tasklist-creator__input\"\r\n                    onChange={onChangeCreateTaskListInput}\r\n                    onKeyPress={this.handleKeyPress}\r\n                    ref={this.inputRef}\r\n                    value={newTaskListName}\r\n                />\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n","import React, { Component } from 'react'\r\nimport './Task.css';\r\nexport default class Task extends Component {\r\n    openEditTaskPanel = () => {\r\n        const { switchIsEditedTask, boardId, tasklistId, id,\r\n            onChangeEditedBoardId, onChangeEditedTaskListId, onChangeEditedTaskId } = this.props;\r\n        onChangeEditedBoardId(boardId);\r\n        onChangeEditedTaskListId(tasklistId);\r\n        onChangeEditedTaskId(id);\r\n        switchIsEditedTask();\r\n    }\r\n    render() {\r\n        const { name, removeTask, boardId, tasklistId, id, completeTask, isCompleted } = this.props;        \r\n        return (\r\n            <div className={isCompleted ? \"task task__completed\" : \"task\"}>\r\n                <label className=\"task__checkbox-container\">\r\n                    <input checked={isCompleted} onChange={() => completeTask(boardId, tasklistId, id)} type=\"checkbox\" />\r\n\r\n                    <span className=\"task__checkmark\"></span>\r\n                </label>\r\n                <div className=\"task__title\">{name}</div>\r\n                <span\r\n                    className='task__icon'\r\n                    onClick={this.openEditTaskPanel}\r\n                >\r\n                    &#9998;\r\n                </span>\r\n                <span\r\n                    onClick={() => removeTask(boardId, tasklistId, id)}\r\n                    className='task__icon'\r\n                >\r\n                    &#x2715;\r\n                </span>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport './SingleTaskList.css';\r\nimport Task from '../Task/Task';\r\n\r\nexport default class SingleTaskList extends Component {\r\n    confirmEdit = () => {\r\n        const { editTaskList, id, boardId } = this.props;\r\n        this.switchIsEdited();\r\n        editTaskList(id, boardId)\r\n    }\r\n    openEditPanel = () => {\r\n        const { onChangeEditedBoardId, onChangeEditedTaskListId, boardId, id, switchIsEdited } = this.props;\r\n        onChangeEditedBoardId(boardId);\r\n        onChangeEditedTaskListId(id);\r\n        switchIsEdited();\r\n    }\r\n    handleKeyPress = (e) => {\r\n        const { createTask, id, boardId } = this.props;\r\n        if (e.key === 'Enter') {\r\n            createTask(boardId, id);\r\n        }\r\n    }\r\n    render() {\r\n        const { name, id, removeTaskList, boardId, onChangeNewTaskName,  onChangeEditedBoardId, onChangeEditedTaskListId,\r\n                newTaskName, boards, removeTask, switchIsEditedTask, onChangeEditedTaskId, completeTask } = this.props;\r\n        const board = boards.filter(board => board.id === +boardId)[0];\r\n        const tasklist = board.tasklists.filter(tasklist => tasklist.id === +id)[0];\r\n        const tasks = tasklist.tasks;\r\n        \r\n        return (\r\n            <div className='single-tasklist'>\r\n                <h1 className='single-tasklist__title'>{name}</h1>\r\n                <span\r\n                    onClick={() => removeTaskList(boardId, id)}\r\n                    className='single-tasklist__remove-icon'\r\n                >\r\n                    &#x2715;\r\n                </span>\r\n                <span\r\n                    onClick={this.openEditPanel}\r\n                    className='single-tasklist__edit-icon'\r\n                >\r\n                    &#9998;\r\n                </span>\r\n                <hr />\r\n                <input\r\n                    onKeyPress={this.handleKeyPress}\r\n                    onChange={onChangeNewTaskName}\r\n                    value={newTaskName}\r\n                    placeholder='add a task'\r\n                    className=\"single-tasklist__input\" type=\"text\"\r\n                />\r\n                {\r\n                    tasks.map(task => {                        \r\n                        return (\r\n                            <Task\r\n                                key={task.id}\r\n                                id={task.id}\r\n                                name={task.name}\r\n                                isCompleted={task.is–°ompleted}\r\n                                removeTask={removeTask}\r\n                                boardId={boardId}\r\n                                tasklistId={id}\r\n                                switchIsEditedTask={switchIsEditedTask}\r\n                                onChangeEditedTaskId={onChangeEditedTaskId}\r\n                                onChangeEditedBoardId={onChangeEditedBoardId}\r\n                                onChangeEditedTaskListId={onChangeEditedTaskListId}\r\n                                completeTask={completeTask}\r\n                            />\r\n                        )\r\n                    })\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React from 'react'\r\nimport \"slick-carousel/slick/slick.css\";\r\nimport \"slick-carousel/slick/slick-theme.css\"\r\nimport Slider from \"react-slick\";\r\nimport './SliderWrapper.css'\r\n\r\nfunction SampleNextArrow(props) {\r\n    const { className, style, onClick } = props;\r\n    return (\r\n        <div\r\n            className={className}\r\n            style={{ ...style, display: \"block\"}}\r\n            onClick={onClick}\r\n        />\r\n    );\r\n}\r\n\r\nfunction SamplePrevArrow(props) {\r\n    const { className, style, onClick } = props;\r\n    return (\r\n        <div\r\n            className={className}\r\n            style={{ ...style, display: \"block\"}}\r\n            onClick={onClick}\r\n        />\r\n    );\r\n}\r\n\r\nconst settings = {\r\n    dots: false,\r\n    infinite: true,\r\n    speed: 500,\r\n    slidesToShow: 1,\r\n    slidesToScroll: 1,\r\n    nextArrow: <SampleNextArrow />,\r\n    prevArrow: <SamplePrevArrow />\r\n};\r\n\r\nconst SliderWrapper = ({ children }) => {\r\n    return (\r\n        <Slider {...settings} className=\"slider-wrapper__carousel\">\r\n            {children}\r\n        </Slider>\r\n    )\r\n}\r\nexport default SliderWrapper;\r\n","import React, { Component } from 'react'\r\nimport TaskListCreator from '../TaskListCreator/TaskListCreator'\r\nimport './TaskLists.css';\r\nimport { Link } from 'react-router-dom'\r\nimport SingleTaskList from '../SingleTaskList/SingleTaskList';\r\nimport SliderWrapper from '../SliderWrapper/SliderWrapper'\r\nimport Modal from '../Modal/Modal';\r\n\r\n\r\nexport default class TaskLists extends Component {\r\n    render() {\r\n        const boardId = this.props.match.params.id;\r\n        const { boards, onChangeCreateTaskListInput, createTaskList, removeTaskList, newTaskListName,\r\n            editTaskList, onChangeEditedTaskListName, editedTaskListName, isEditedTaskList, switchIsEdited,\r\n            onChangeEditedBoardId, onChangeEditedTaskListId, newTaskName, onChangeNewTaskName, createTask,\r\n            removeTask, onChangeEditedTaskName, editTask, editedTaskName, switchIsEditedTask, isEditedTask,\r\n            onChangeEditedTaskId, completeTask } = this.props;\r\n        const board = boards.filter(board => board.id === +boardId)[0];\r\n        return (\r\n            <React.Fragment>\r\n                <div className=\"tasklists__title-container\">\r\n                    <Link to='/' className=\"tasklists__title\">{board.name}</Link>\r\n                </div>\r\n                <div className='tasklists'>\r\n                    <TaskListCreator\r\n                        onChangeCreateTaskListInput={onChangeCreateTaskListInput}\r\n                        createTaskList={createTaskList}\r\n                        id={boardId}\r\n                        newTaskListName={newTaskListName}\r\n                    />\r\n                    <SliderWrapper>\r\n                        {\r\n                            board.tasklists && board.tasklists.map(tasklist => {\r\n                                return (\r\n                                    <SingleTaskList\r\n                                        boardId={boardId}\r\n                                        key={tasklist.id}\r\n                                        name={tasklist.name}\r\n                                        id={tasklist.id}\r\n                                        isCompleted={tasklist.isCompleted}\r\n                                        removeTaskList={removeTaskList}\r\n                                        switchIsEdited={switchIsEdited}\r\n                                        onChangeEditedBoardId={onChangeEditedBoardId}\r\n                                        onChangeEditedTaskListId={onChangeEditedTaskListId}\r\n                                        newTaskName={newTaskName}\r\n                                        onChangeNewTaskName={onChangeNewTaskName}\r\n                                        createTask={createTask}\r\n                                        boards={boards}\r\n                                        removeTask={removeTask}\r\n                                        onChangeEditedTaskName={onChangeEditedTaskName}\r\n                                        editTask={editTask}\r\n                                        switchIsEditedTask={switchIsEditedTask}\r\n                                        onChangeEditedTaskId={onChangeEditedTaskId}\r\n                                        completeTask={completeTask}\r\n                                    />\r\n                                )\r\n                            })\r\n                        }\r\n                    </SliderWrapper>\r\n                </div>\r\n                <Modal\r\n                    inputValue={editedTaskListName}\r\n                    onClose={switchIsEdited}\r\n                    onChange={onChangeEditedTaskListName}\r\n                    inputPlaceholder=\"enter new list name\"\r\n                    editFoo={editTaskList}\r\n                    isEdited={isEditedTaskList}\r\n                />\r\n                <Modal\r\n                    inputValue={editedTaskName}\r\n                    onClose={switchIsEditedTask}\r\n                    onChange={onChangeEditedTaskName}\r\n                    inputPlaceholder=\"enter new task name\"\r\n                    editFoo={editTask}\r\n                    isEdited={isEditedTask}\r\n                />\r\n            </React.Fragment>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport { Link } from 'react-router-dom';\r\nimport './SingleNote.css';\r\n\r\nexport default class SingleNote extends Component {\r\n    state = {\r\n        editedText: ''\r\n    }\r\n    componentDidMount() {\r\n        const { switchIsEditedNoteText, notes } = this.props;\r\n        const noteId = this.props.match.params.id;\r\n        const note = notes.filter(note => note.id === +noteId)[0];\r\n        if (note.text.length < 1) {\r\n            switchIsEditedNoteText();\r\n        }\r\n        this.setState({editedText: note.text});\r\n    }\r\n    onChangeEditedText = e => {\r\n        this.setState({ editedText: e.target.value })\r\n    }\r\n    onSubmit = (id, text) => {\r\n        const { editNoteText, switchIsEditedNoteText } = this.props;\r\n        if (text.length > 0) {\r\n            editNoteText(id, text);\r\n            switchIsEditedNoteText();\r\n        }\r\n    }\r\n    render() {\r\n        const noteId = this.props.match.params.id;\r\n        const { notes, isEditedNoteText, switchIsEditedNoteText } = this.props;\r\n        const { editedText } = this.state;\r\n        const note = notes.filter(note => note.id === +noteId)[0];\r\n        return (\r\n            <div className=\"single-note\">\r\n                <Link className=\"single-note__link\" to='/'>{note.name}</Link>\r\n                {\r\n                    isEditedNoteText  && (\r\n                        <>\r\n                            <textarea\r\n                                onChange={this.onChangeEditedText}\r\n                                value={editedText}\r\n                                className=\"single-note__text-editor\"\r\n                                placeholder={`type something\\ndouble click to edit`}\r\n                            />\r\n                            <button onClick={() => this.onSubmit(note.id, editedText)} className=\"single-note__submit\">Submit</button>\r\n                        </>\r\n                    )\r\n                }\r\n                {\r\n                    !isEditedNoteText && (\r\n                        <div className=\"single-note__text-container\">\r\n                            <div className='single-note__text' onDoubleClick={switchIsEditedNoteText}>{note.text}</div>\r\n                        </div>\r\n                    )\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\nimport './App.css';\nimport BoardList from './components/BoardList/BoardList'\nimport { connect } from 'react-redux';\nimport { createBoard, removeBoard, editBoard, createTaskList, removeTaskList, editTaskList, createTask, removeTask, editTask, completeTask } from './store/actions/boardActionCreator';\nimport { createNote, removeNote, editNote, editNoteText } from './store/actions/noteActionCreator'\nimport { HashRouter, Route, Switch } from 'react-router-dom';\nimport TaskLists from './components/TasksLists/TaskLists';\nimport SingleNote from './components/SingleNote/SingleNote';\n\nclass App extends Component {\n  state = {\n    newBoardName: '',\n    newTaskListName: '',\n    editedTaskListName: '',\n    editedTaskListId: '',\n    editedBoardId: '',\n    isEditedTaskList: false,\n    newTaskName: '',\n    editedTaskName: '',\n    editedTaskId: '',\n    isEditedTask: false,\n    isEditedBoard: false,\n    newNoteName: '',\n    editedBoardName: '',\n    isEditedNote: false,\n    editedNoteName: '',\n    editedNoteId: '',\n    isEditedNoteText: false,\n    editedNoteText: '',\n  }\n\n  onChangeCreateBoardInput = e => {\n    this.setState({\n      newBoardName: e.target.value\n    })\n  }\n\n  onChangeCreateNoteInput = e => {\n    this.setState({\n      newNoteName: e.target.value\n    })\n  }\n\n  onChangeEditedBoardName = e => {\n    this.setState({\n      editedBoardName: e.target.value\n    })\n  }\n\n  onChangeCreateTaskListInput = e => {\n    this.setState({\n      newTaskListName: e.target.value\n    })\n  }\n  onChangeEditedTaskListName = e => {\n    this.setState({\n      editedTaskListName: e.target.value\n    })\n  }\n\n  onChangeEditedTaskListId = value => {\n    this.setState({ editedTaskListId: value });\n  }\n\n  onChangeEditedBoardId = value => {\n    this.setState({ editedBoardId: value });\n  }\n  onChangeNewTaskName = e => {\n    this.setState({ newTaskName: e.target.value });\n  }\n\n  onChangeEditedTaskName = e => {\n    this.setState({ editedTaskName: e.target.value });\n  }\n\n  onChangeEditedTaskId = value => {\n    this.setState({ editedTaskId: value });\n  }\n\n  editBoard = () => {\n    const { editBoard } = this.props;\n    const { editedBoardName, editedBoardId } = this.state;\n    editBoard(editedBoardId, editedBoardName);\n    this.setState({ editedBoardName: '' });\n  }\n\n  createBoard = () => {\n    const { createBoard } = this.props;\n    const { newBoardName } = this.state;\n    if (newBoardName.length > 0) {\n      createBoard((new Date()).getTime(), newBoardName);\n      this.setState({ newBoardName: '' });\n    }\n  }\n\n  createTaskList = (board_id) => {\n    const { createTaskList } = this.props;\n    const { newTaskListName } = this.state;\n    if (newTaskListName.length > 0) {\n      createTaskList(board_id, (new Date().getTime()), newTaskListName);\n      this.setState({ newTaskListName: '' })\n    }\n  }\n\n  editTaskList = () => {\n    const { editTaskList } = this.props;\n    const { editedBoardId, editedTaskListId, editedTaskListName } = this.state;\n    editTaskList(editedBoardId, editedTaskListId, editedTaskListName);\n    this.setState({ editedTaskListName: '' });\n  }\n\n  switchIsEdited = () => {\n    this.setState({ isEditedTaskList: !this.state.isEditedTaskList });\n  }\n\n  switchIsEditedBoard = () => {\n    this.setState({ isEditedBoard: !this.state.isEditedBoard });\n  }\n\n  createTask = (board_id, tasklist_id) => {\n    const { createTask } = this.props;\n    const { newTaskName } = this.state;\n    if (newTaskName.length > 0) {\n      createTask(board_id, tasklist_id, (new Date().getTime()), newTaskName, false);\n      this.setState({ newTaskName: '' });\n    }\n  }\n\n  editTask = () => {\n    const { editTask } = this.props;\n    const { editedBoardId, editedTaskListId, editedTaskId, editedTaskName } = this.state;\n    editTask(editedBoardId, editedTaskListId, editedTaskId, editedTaskName);\n    this.setState({ editedTaskName: '' });\n  }\n\n  switchIsEditedTask = () => {\n    this.setState({ isEditedTask: !this.state.isEditedTask });\n  }\n\n  createNote = () => {\n    const { createNote } = this.props;\n    const { newNoteName } = this.state;\n    if (newNoteName.length > 0) {\n      createNote((new Date()).getTime(), newNoteName);\n      this.setState({ newNoteName: '' });\n    }\n  }\n\n  switchIsEditedNote = () => {\n    this.setState({ isEditedNote: !this.state.isEditedNote });\n  }\n\n  editNote = () => {\n    const { editNote } = this.props;\n    const { editedNoteName, editedNoteId } = this.state;\n    editNote(editedNoteId, editedNoteName);\n    this.setState({ editedNoteName: '' });\n  }\n\n  onChangeEditedNoteName = e => {\n    this.setState({\n      editedNoteName: e.target.value\n    })\n  }\n\n  onChangeEditedNoteId = value => {\n    this.setState({ editedNoteId: value });\n  }\n\n  switchIsEditedNoteText = () => {\n    this.setState({ isEditedNoteText: !this.state.isEditedNoteText });\n  }\n\n\n  render() {\n    const { removeBoard, boards, getBoardById, removeTaskList, removeTask, completeTask, notes, removeNote, editNoteText } = this.props;\n    const { editedTaskListName, isEditedTaskList, newTaskListName, newTaskName, editedTaskName,\n      isEditedTask, newNoteName, newBoardName, editedBoardName, isEditedBoard, editedNoteName, isEditedNote, isEditedNoteText } = this.state;\n    return (\n      <div>\n        <HashRouter>\n          <Switch>\n            <Route exact path='/' render={() => (<BoardList\n              onChangeCreateBoardInput={this.onChangeCreateBoardInput}\n              createBoard={this.createBoard}\n              removeBoard={removeBoard}\n              boards={boards}\n              notes={notes}\n              newBoardName={newBoardName}\n              onChangeCreateNoteInput={this.onChangeCreateNoteInput}\n              newNoteName={newNoteName}\n              createNote={this.createNote}\n              onChangeEditedBoardName={this.onChangeEditedBoardName}\n              switchIsEditedBoard={this.switchIsEditedBoard}\n              editedBoardName={editedBoardName}\n              editBoard={this.editBoard}\n              isEditedBoard={isEditedBoard}\n              onChangeEditedBoardId={this.onChangeEditedBoardId}\n              removeNote={removeNote}\n              switchIsEditedNote={this.switchIsEditedNote}\n              editNote={this.editNote}\n              onChangeEditedNoteName={this.onChangeEditedNoteName}\n              onChangeEditedNoteId={this.onChangeEditedNoteId}\n              editedNoteName={editedNoteName}\n              isEditedNote={isEditedNote}\n            />)} />\n            <Route path='/board/:id' render={((matchProps) => <TaskLists\n              {...matchProps}\n              onChangeCreateTaskListInput={this.onChangeCreateTaskListInput}\n              onChangeEditedTaskListName={this.onChangeEditedTaskListName}\n              boards={boards}\n              getBoardById={getBoardById}\n              createTaskList={this.createTaskList}\n              removeTaskList={removeTaskList}\n              editTaskList={this.editTaskList}\n              newTaskListName={newTaskListName}\n              editedTaskListName={editedTaskListName}\n              isEditedTaskList={isEditedTaskList}\n              switchIsEdited={this.switchIsEdited}\n              onChangeEditedTaskListId={this.onChangeEditedTaskListId}\n              onChangeEditedBoardId={this.onChangeEditedBoardId}\n              newTaskName={newTaskName}\n              onChangeNewTaskName={this.onChangeNewTaskName}\n              createTask={this.createTask}\n              removeTask={removeTask}\n              onChangeEditedTaskName={this.onChangeEditedTaskName}\n              editTask={this.editTask}\n              editedTaskName={editedTaskName}\n              isEditedTask={isEditedTask}\n              switchIsEditedTask={this.switchIsEditedTask}\n              onChangeEditedTaskId={this.onChangeEditedTaskId}\n              completeTask={completeTask}\n            />)} />\n            <Route path='/note/:id' render={((matchProps) => <SingleNote\n              {...matchProps}\n              notes={notes}\n              switchIsEditedNote={this.switchIsEditedNote}\n              editNoteText={editNoteText}\n              isEditedNoteText={isEditedNoteText}\n              switchIsEditedNoteText={this.switchIsEditedNoteText}\n            />)} />\n          </Switch>\n        </HashRouter>\n      </div>\n    )\n  }\n}\n\nexport default connect(state => ({\n  boards: state.boards,\n  notes: state.notes\n}), {\n  createBoard, removeBoard, editBoard, createTaskList, removeTaskList, editTaskList,\n  createTask, removeTask, editTask, completeTask, createNote, removeNote, editNote, editNoteText\n})(App);\n","import { CREATE_BOARD, REMOVE_BOARD, EDIT_BOARD, CREATE_TASKLIST, REMOVE_TASKLIST,\r\n        EDIT_TASKLIST, CREATE_TASK, REMOVE_TASK, EDIT_TASK, COMPLETE_TASK, CREATE_NOTE} from '../constants';\r\n\r\nexport const createBoard = (id, name) => ({\r\n    type: CREATE_BOARD,\r\n    id,\r\n    name\r\n});\r\n\r\nexport const removeBoard = ( id ) => ({\r\n    type: REMOVE_BOARD,\r\n    id\r\n})\r\n\r\nexport const editBoard = (id, name) => ({\r\n    type: EDIT_BOARD,\r\n    id,\r\n    name\r\n})\r\n\r\nexport const createTaskList = (board_id, id, name) => ({\r\n    type: CREATE_TASKLIST,\r\n    board_id,\r\n    id,\r\n    name\r\n});\r\n\r\nexport const removeTaskList = (board_id, id) => ({\r\n    type: REMOVE_TASKLIST,\r\n    board_id,\r\n    id\r\n})\r\n\r\nexport const editTaskList = (board_id, id, name) => ({\r\n    type: EDIT_TASKLIST,\r\n    board_id,\r\n    id,\r\n    name\r\n})\r\n\r\nexport const createTask = (board_id, tasklist_id, id, name, is–°ompleted) => ({\r\n    type: CREATE_TASK,\r\n    board_id,\r\n    tasklist_id,\r\n    id,\r\n    name, \r\n    is–°ompleted\r\n})\r\n\r\nexport const removeTask = (board_id, tasklist_id, id) => ({\r\n    type: REMOVE_TASK,\r\n    board_id,\r\n    tasklist_id,\r\n    id\r\n})\r\n\r\nexport const editTask = (board_id, tasklist_id, id, name) => ({\r\n    type: EDIT_TASK,\r\n    board_id,\r\n    tasklist_id,\r\n    id,\r\n    name, \r\n})\r\n\r\nexport const completeTask = (board_id, tasklist_id, id) => ({\r\n    type: COMPLETE_TASK,\r\n    board_id,\r\n    tasklist_id,\r\n    id\r\n})\r\n\r\nexport const createNote = (id, name) => ({\r\n    type: CREATE_NOTE,\r\n    id,\r\n    name\r\n})\r\n","export const CREATE_BOARD = 'CREATE_BOARD';\r\n\r\nexport const REMOVE_BOARD = 'REMOVE_BOARD';\r\n\r\nexport const EDIT_BOARD = 'EDIT_BOARD';\r\n\r\nexport const CREATE_TASKLIST = 'CREATE_TASKLIST';\r\n\r\nexport const REMOVE_TASKLIST = 'REMOVE_TASKLIST';\r\n\r\nexport const EDIT_TASKLIST = 'EDIT_TASKLIST';\r\n\r\nexport const CREATE_TASK = 'CREATE_TASK';\r\n\r\nexport const REMOVE_TASK = 'REMOVE_TASK';\r\n\r\nexport const EDIT_TASK = 'EDIT_TASK';\r\n\r\nexport const COMPLETE_TASK = 'COMPLETE_TASK';\r\n\r\nexport const CREATE_NOTE = 'CREATE_NOTE';\r\n\r\nexport const REMOVE_NOTE = 'REMOVE_NOTE';\r\n\r\nexport const EDIT_NOTE = 'EDIT_NOTE';\r\n\r\nexport const EDIT_NOTE_TEXT = 'EDIT_NOTE_TEXT';","import { CREATE_NOTE, REMOVE_NOTE, EDIT_NOTE, EDIT_NOTE_TEXT } from '../constants';\r\n\r\n\r\nexport const createNote = (id, name) => ({\r\n    type: CREATE_NOTE,\r\n    id,\r\n    name\r\n})\r\n\r\nexport const removeNote = ( id ) => ({\r\n    type: REMOVE_NOTE,\r\n    id\r\n})\r\n\r\nexport const editNote = (id, name) => ({\r\n    type: EDIT_NOTE,\r\n    id,\r\n    name\r\n})\r\n\r\nexport const editNoteText = (id, text) => ({\r\n    type: EDIT_NOTE_TEXT,\r\n    id,\r\n    text\r\n})","import {\r\n    CREATE_BOARD, REMOVE_BOARD, EDIT_BOARD, CREATE_TASKLIST, REMOVE_TASKLIST,\r\n    EDIT_TASKLIST, CREATE_TASK, REMOVE_TASK, EDIT_TASK, COMPLETE_TASK\r\n} from '../constants';\r\nimport { load } from 'redux-localstorage-simple';\r\n\r\nlet BOARDS = load({ namespace: 'redux-intro' });\r\n\r\nif (!BOARDS || !BOARDS.boards || !BOARDS.boards.length) {\r\n    BOARDS = {\r\n        boards: [],\r\n    }\r\n}\r\n\r\nconst boards = (state = BOARDS.boards, { id, name, type, board_id, tasklist_id, is–°ompleted }) => {\r\n    switch (type) {\r\n        case CREATE_BOARD:\r\n            return [\r\n                ...state, {\r\n                    id: id,\r\n                    name: name,\r\n                    tasklists: []\r\n                }\r\n            ];\r\n        case EDIT_BOARD:\r\n            return [...state].map(board => {\r\n                if (board.id === id) {\r\n                    board.name = name\r\n                }\r\n                return board;\r\n            })\r\n        case REMOVE_BOARD:\r\n            return [...state].filter(board =>\r\n                board.id !== id\r\n            );\r\n        case CREATE_TASKLIST:\r\n            const newTaskList = {\r\n                id,\r\n                name,\r\n                tasks: []\r\n            }\r\n            return [...state].map(board => {\r\n                if (board.id === +board_id) {\r\n                    board.tasklists = [newTaskList, ...board.tasklists];\r\n                }\r\n                return board;\r\n            })\r\n        case REMOVE_TASKLIST:\r\n            return [...state].map(board => {\r\n                if (board.id === +board_id) {\r\n                    board.tasklists = board.tasklists.filter(tasklist =>\r\n                        tasklist.id !== id\r\n                    );\r\n                }\r\n                return { id: board.id, name: board.name, tasklists: board.tasklists }\r\n            })\r\n        case EDIT_TASKLIST:\r\n            return [...state].map(board => {\r\n                if (board.id === +board_id) {\r\n                    board.tasklists.forEach(tasklist => {\r\n                        if (tasklist.id === id) {\r\n                            tasklist.name = name;\r\n                        }\r\n                    })\r\n                }\r\n                return { id: board.id, name: board.name, tasklists: board.tasklists }\r\n            })\r\n        case CREATE_TASK:\r\n            const newTask = {\r\n                id,\r\n                name,\r\n                is–°ompleted\r\n            }\r\n            return [...state].map(board => {\r\n                if (board.id === +board_id) {\r\n                    board.tasklists.forEach(tasklist => {\r\n                        if (tasklist.id === +tasklist_id) {\r\n                            tasklist.tasks = [...tasklist.tasks, newTask];\r\n                        }\r\n                    })\r\n                }\r\n                return board;\r\n            })\r\n        case REMOVE_TASK:\r\n            return [...state].map(board => {\r\n                if (board.id === +board_id) {\r\n                    board.tasklists.forEach(tasklist => {\r\n                        if (tasklist.id === tasklist_id) {\r\n                            tasklist.tasks = tasklist.tasks.filter(task =>\r\n                                task.id !== id\r\n                            )\r\n                        }\r\n                    })\r\n                }\r\n                return { id: board.id, name: board.name, tasklists: board.tasklists }\r\n            })\r\n        case EDIT_TASK:\r\n            return [...state].map(board => {\r\n                if (board.id === +board_id) {\r\n                    board.tasklists.forEach(tasklist => {\r\n                        if (tasklist.id === tasklist_id) {\r\n                            tasklist.tasks.forEach(task => {\r\n                                if (task.id === id) {\r\n                                    task.name = name;\r\n                                }\r\n                            })\r\n                        }\r\n                    })\r\n                }\r\n                return { id: board.id, name: board.name, tasklists: board.tasklists }\r\n            })\r\n        case COMPLETE_TASK:\r\n            return [...state].map(board => {\r\n                if (board.id === +board_id) {\r\n                    board.tasklists.forEach(tasklist => {\r\n                        if (tasklist.id === tasklist_id) {\r\n                            tasklist.tasks.forEach(task => {\r\n                                if (task.id === id) {\r\n                                    task.is–°ompleted = !task.is–°ompleted;\r\n                                }\r\n                            })\r\n                        }\r\n                    })\r\n                }\r\n                return { id: board.id, name: board.name, tasklists: board.tasklists }\r\n            })\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default boards;","import { CREATE_NOTE, REMOVE_NOTE, EDIT_NOTE, EDIT_NOTE_TEXT } from '../constants'\r\nimport { load } from 'redux-localstorage-simple';\r\n\r\n\r\nlet NOTES = load({ namespace: 'redux-intro' });\r\n\r\nif (!NOTES || !NOTES.notes || !NOTES.notes.length) {\r\n    NOTES = {\r\n        notes: [],\r\n    }\r\n}\r\n\r\nconst notes = (state = NOTES.notes, { id, name, type, text }) => {\r\n    switch (type) {\r\n        case CREATE_NOTE:\r\n            return [\r\n                ...state, {\r\n                    id: id,\r\n                    name: name,\r\n                    text: ''\r\n                }\r\n            ];\r\n        case REMOVE_NOTE:\r\n            return [...state].filter(note =>\r\n                note.id !== id\r\n            );\r\n        case EDIT_NOTE:\r\n            return [...state].map(note => {\r\n                if (note.id === id) {\r\n                    note.name = name\r\n                }\r\n                return note;\r\n            })\r\n        case EDIT_NOTE_TEXT:\r\n            return [...state].map(note => {\r\n                if (note.id === id) {\r\n                    note.text = text\r\n                }\r\n                return note;\r\n            })\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default notes;","import { combineReducers } from 'redux';\r\nimport boards from './boards';\r\nimport notes from './notes';\r\n\r\nconst rootReducer = combineReducers({ boards, notes });\r\n\r\nexport default rootReducer;","import { createStore, compose, applyMiddleware } from 'redux';\r\nimport rootReducer from './reducers/index';\r\nimport { save } from 'redux-localstorage-simple';\r\n\r\nconst middleware = [save({ namespace: 'redux-intro'}), ];\r\n\r\nconst store = createStore(\r\n    rootReducer,\r\n    compose(\r\n        applyMiddleware(...middleware),\r\n        // window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\r\n    )\r\n);\r\n\r\n\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport store from './store/store'\nimport { Provider } from 'react-redux'\n\nReactDOM.render((\n    <Provider store={store}>\n        <App />\n    </Provider>\n), document.getElementById('root'));"],"sourceRoot":""}